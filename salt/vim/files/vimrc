set nocompatible

" Vundle config
" git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

" PLUGINS
    " Python
    Plugin 'tmhedberg/SimpylFold'
    Plugin 'vim-scripts/indentpython.vim'
    Plugin 'davidhalter/jedi-vim'

    " JavaScript
    Plugin 'pangloss/vim-javascript'
    Plugin 'mxw/vim-jsx'
    Plugin 'leshill/vim-json'
    Plugin 'posva/vim-vue'

    " Go
    Plugin 'fatih/vim-go', {'pinned': 1}

    " Syntax checking
    Plugin 'vim-syntastic/syntastic'
    Plugin 'bronson/vim-trailing-whitespace'

    " Misc
    Plugin 'jiangmiao/auto-pairs'
    Plugin 'alvan/vim-closetag'
" END PLUGINS

call vundle#end()

filetype plugin indent on

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands

set incsearch		" do incremental searching
set hlsearch
set ignorecase

set mouse=a
syntax on

set nowrap
set whichwrap=b,s,h,l
set nu
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
set autoindent

set wildmenu
set cursorline
set laststatus=2
set showmatch

set ttimeoutlen=100 "prevents Ctrl+O delay

" Encoding
set enc=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf8,prc
set guifont=Lucida_Console:h10:cANSI
set guifontwide=Lucida_Console:h11:b:cANSI

set nobackup
set noundofile
set noswapfile

set splitright
set splitbelow

" Keys
" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>
map Q gq                " Don't use Ex mode, use Q for formatting
let mapleader = " "
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <Leader>l zo
nnoremap <Leader>h zc
nnoremap <Leader>e :20Lexplore<CR>
nnoremap <Leader>c "+y
nnoremap <Leader>v "+p

" Folding
set foldmethod=syntax
set foldlevel=99

" Custom filetypes
au BufRead,BufNewFile *.sls setf yaml

highlight BadWhitespace ctermbg=red guibg=red
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h,*.java match BadWhitespace /\s\+$/
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h,*.java match BadWhitespace /^\t\+/

" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
endif

let g:netrw_liststyle=3

set background=dark

" Languages

" C
let c_comment_strings=1

" Python
autocmd FileType python set foldmethod=indent
let python_highlight_all=1
syntax on

" JavaScript
autocmd FileType javascript.jsx setl shiftwidth=2

" Plugins

" SimpylFold
let g:SimpylFold_docstring_preview=1

" Syntastic
let g:syntastic_always_populate_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_javascript_checkers = ["eslint"]

function! FindConfig(prefix, what, where)
    let cfg = findfile(a:what, escape(a:where, ' ') . ';')
    return cfg !=# '' ? ' ' . a:prefix . ' ' . shellescape(cfg) : ''
endfunction

autocmd FileType javascript.jsx let b:syntastic_javascript_eslint_args =
    \ get(g:, 'syntastic_javascript_eslint_args', '') .
    \ FindConfig('-c', '.eslintrc', expand('<afile>:p:h', 1))

" vim-javascript
let g:jsx_ext_required = 0

" vim-closetag
let g:closetag_filenames = '*.html,*.xhtml,*.htm,*.xml,*.vue,*.jsp,*.jsx'
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" jedi-vim
let g:jedi#popup_on_dot = 0
